<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)\..\FSProd\FSProd.Model\bin\x86\Debug\netstandard2.0\FSProd.Model.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="FSProd.Model" #>
<#@ output extension=".cs" #>
<#
  foreach (var modelType in GetModelTypes())
  {
    var simpleProperties = modelType.GetProperties()
          .Where(p => p.PropertyType.IsValueType || p.PropertyType == typeof(string)).ToList();

    var complexProperties = modelType.GetProperties().Except(simpleProperties)
          .Where(p => p.PropertyType.IsClass 
	                  && !typeof(IEnumerable).IsAssignableFrom(p.PropertyType)).ToList();

    var collectionProperties = modelType.GetProperties()
	      .Except(simpleProperties)
		  .Except(complexProperties)
	      .Where(p=>p.PropertyType.IsGenericType).ToList();

#>

using System;
using System.Linq;
using FSProd.Model;
using FSProd.Tool.Utilities;
using System.ComponentModel.DataAnnotations;

namespace FSProd.Tool.Modelwrappers
{
  public partial class <#=modelType.Name#>Wrapper : UiModelWrapper<<#=modelType.Name#>>
  {
    public <#=modelType.Name#>Wrapper(<#=modelType.Name#> model) : base(model)
    {
    }
<#
	GenerateSimpleProperties(simpleProperties);
	GenerateComplexProperties(complexProperties);
	GenerateCollectionProperties(collectionProperties);
    GenerateInitializeComplexProperties(modelType.Name, complexProperties);
	GenerateInitializeCollectionProperties(modelType.Name, collectionProperties);
#>
  }
}
<#  
  SaveGeneratedCodeAsFile(modelType.Name + "Wrapper.g.cs");
  }
#>

<#+ 
  private IEnumerable<Type> GetModelTypes()
  {
        string[] typenames = new string[] {
        "DemandScenario",
        "DemandData"
		};
         return typeof(FSProd.Model.Product).Assembly.GetTypes().Where(t => typenames.Contains(t.Name));
  }

  private void SaveGeneratedCodeAsFile(string fileName)
  {
    string dir = Path.GetDirectoryName(Host.TemplateFile);
  
    string outputFilePath = Path.Combine(dir, fileName);
    File.WriteAllText(outputFilePath, GenerationEnvironment.ToString()); 
 
    GenerationEnvironment.Clear();
  }

  private string GetTypeName(Type type)
  {
    if (type.IsGenericType)
    {
      var genericArguments = type.GetGenericArguments().Select(t => GetTypeName(t)).ToArray();
      var typeDefinition = type.GetGenericTypeDefinition().FullName;
      typeDefinition = typeDefinition.Substring(0, typeDefinition.IndexOf('`'));
      return string.Format("{0}<{1}>", typeDefinition, string.Join(",", genericArguments));
    }
    else
    {
		if(Aliases.TryGetValue(type, out string tn))
		{
			return tn;
		}
		else
		{
			return type.FullName;
		}
    }
  }

	private static readonly Dictionary<Type, string> Aliases = new Dictionary<Type, string>()
	{
		{ typeof(byte), "byte" },
		{ typeof(sbyte), "sbyte" },
		{ typeof(short), "short" },
		{ typeof(ushort), "ushort" },
		{ typeof(int), "int" },
		{ typeof(uint), "uint" },
		{ typeof(long), "long" },
		{ typeof(ulong), "ulong" },
		{ typeof(float), "float" },
		{ typeof(double), "double" },
		{ typeof(decimal), "decimal" },
		{ typeof(object), "object" },
		{ typeof(bool), "bool" },
		{ typeof(char), "char" },
		{ typeof(string), "string" },
		{ typeof(void), "void" },
		{ typeof(DateTime), "DateTime" }
	};

  private void GenerateSimpleProperties(IEnumerable<PropertyInfo> properties)
  {
    foreach (var property in properties)
    {
      var propertyType = GetTypeName(property.PropertyType);
      var propertyName= property.Name;
#>

    public <#=propertyType#> <#=propertyName#>
    {
      get { return GetValue<<#=propertyType#>>(); }
      set { SetValue(value); }
    }

	[Display(AutoGenerateField = false)]
    public <#=propertyType#> <#=propertyName#>OriginalValue => GetOriginalValue<<#=propertyType#>>(nameof(<#=propertyName#>));

	[Display(AutoGenerateField = false)]
    public bool <#=propertyName#>IsChanged => GetIsChanged(nameof(<#=propertyName#>));
<#+ 
    }
  }

  private void GenerateComplexProperties(IEnumerable<PropertyInfo> properties)
  {
    foreach (var property in properties)
    {
      var propertyType = property.PropertyType.Name;
      var propertyName= property.Name;
#>

	[Display(AutoGenerateField = false)] 
    public <#= propertyType #>Wrapper <#= propertyName #> { get; private set; }
<#+   
    }
  }

  private void GenerateCollectionProperties(IEnumerable<PropertyInfo> properties)
  {
    foreach (var property in properties)
    {
      var itemType = property.PropertyType.GenericTypeArguments[0].Name;
      var propertyName= property.Name;
#>
	[Display(AutoGenerateField = false)] 
    public ChangeTrackingCollection<<#= itemType #>Wrapper> <#= propertyName #> { get; private set; }
<#+  
    }
  }

  private void GenerateInitializeComplexProperties(string modelTypeName, IEnumerable<PropertyInfo> properties)
  {
    if(properties.Any())
    {
#>
    
    protected override void InitializeComplexProperties(<#= modelTypeName #> model)
    {
<#+
	  foreach (var complexProperty in properties)
      {
		var propertyName = complexProperty.Name;
		var propertyType = complexProperty.PropertyType.Name;
#>
      if (model.<#= propertyName #> == null)
      {
        throw new ArgumentException("<#= propertyName #> cannot be null");
      }
      <#= propertyName #> = new <#= propertyType #>Wrapper(model.<#= propertyName #>);
      RegisterComplex(<#= propertyName #>);
<#+
      }
#>
    }
<#+
    }
  }

  private void GenerateInitializeCollectionProperties(string modelTypeName, IEnumerable<System.Reflection.PropertyInfo> properties)
  {
    if(properties.Any())
    {
#>

    protected override void InitializeCollectionProperties()
    {
<#+
      foreach(var property in properties)
      {
		var itemType = property.PropertyType.GenericTypeArguments[0].Name;
		var propertyName = property.Name;
		   
#>
      if (Model.<#= propertyName#> == null)
      {
        throw new ArgumentException("<#= propertyName#> cannot be null");
      }
 
      <#= propertyName #> = new ChangeTrackingCollection<<#= itemType #>Wrapper>(
        Model.<#= propertyName #>.Select(e => new <#= itemType #>Wrapper(e)));
      RegisterCollectionUpdates(<#= propertyName #>, Model.<#= propertyName #>);
<#+
     }
#>
    }
<#+
    }
  }

#>