<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)\..\FSProd\FSProd.Model\bin\x86\Debug\netstandard2.0\FSProd.Model.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="FSProd.Model" #>
<#@ output extension=".cs" #>
<#
  foreach (var modelType in GetModelTypes())
  {
    var simpleProperties = modelType.GetProperties()
          .Where(p => p.PropertyType.IsValueType || p.PropertyType == typeof(string)).ToList();

    var complexProperties = modelType.GetProperties().Except(simpleProperties)
          .Where(p => p.PropertyType.IsClass 
	                  && !typeof(IEnumerable).IsAssignableFrom(p.PropertyType)).ToList();

    var collectionProperties = modelType.GetProperties()
	      .Except(simpleProperties)
		  .Except(complexProperties)
	      .Where(p=>p.PropertyType.IsGenericType).ToList();

#>

using System;
using System.Linq;
using FSProd.Model;
using System.ComponentModel.DataAnnotations;
using GalaSoft.MvvmLight;

namespace FSProd.Tool.Viewmodels
{
  public class <#=modelType.Name#>Viewmodel : ObservableObject
  {
    public <#=modelType.Name#>Viewmodel(<#=modelType.Name#> model) 
    {
        <#
            foreach(var prop in simpleProperties)
            {
                var propertyName = prop.Name;
                #>
    this.<#=propertyName#> = model.<#=propertyName#>;
                <#
            }

            foreach(var prop in complexProperties)
            {
                var propertyName = prop.Name;
                var propertyType = prop.PropertyType.Name;
                #>
    this.<#=propertyName#> = new <#=propertyType#>Viewmodel(model.<#=propertyName#>);
                <#
            }


            foreach(var prop in collectionProperties)
            {
                var propertyName = prop.Name;
                var itemType = prop.PropertyType.GenericTypeArguments[0].Name;
                #>
        this.<#=propertyName#> = new ObservableCollection<<#=itemType#>Viewmodel>();
                <#
            }

        #>

    }

    public <#=modelType.Name#> To<#=modelType.Name#>()
    {
        <#=modelType.Name#> model = new <#=modelType.Name#>();
        <#
            foreach(var prop in simpleProperties)
            {
                var propertyName = prop.Name;
                #>
    model.<#=propertyName#> = this.<#=propertyName#>;
                <#
            }

            foreach(var prop in complexProperties)
            {
                var propertyName = prop.Name;
                var propertyType = prop.PropertyType.Name;
                #>
    model.<#=propertyName#> = this.<#=propertyName#>.To<#=propertyType#>();
                <#
            }

        #>
        //TODO:  Handle the collection properties !!!
        return model;
    }

<#
	GenerateSimpleProperties(simpleProperties);
	GenerateComplexProperties(complexProperties);
	GenerateCollectionProperties(collectionProperties);
#>
  }
}

<#  
  SaveGeneratedCodeAsFile(modelType.Name + "Viewmodel.cs");
  }
#>

<#+ 
  private IEnumerable<Type> GetModelTypes()
  {
        string[] typenames = new string[] {
        "CalculationJob"
		};
        return typeof(FSProd.Model.Product).Assembly.GetTypes().Where(t => typenames.Contains(t.Name));
  }

  private void SaveGeneratedCodeAsFile(string fileName)
  {
    string dir = Path.GetDirectoryName(Host.TemplateFile);
  
    string outputFilePath = Path.Combine(dir, fileName);
    File.WriteAllText(outputFilePath, GenerationEnvironment.ToString()); 
 
    GenerationEnvironment.Clear();
  }

  private string GetTypeName(Type type)
  {
    if (type.IsGenericType)
    {
      var genericArguments = type.GetGenericArguments().Select(t => GetTypeName(t)).ToArray();
      var typeDefinition = type.GetGenericTypeDefinition().FullName;
      typeDefinition = typeDefinition.Substring(0, typeDefinition.IndexOf('`'));
      return string.Format("{0}<{1}>", typeDefinition, string.Join(",", genericArguments));
    }
    else
    {
		if(Aliases.TryGetValue(type, out string tn))
		{
			return tn;
		}
		else
		{
			return type.FullName;
		}
    }
  }

	private static readonly Dictionary<Type, string> Aliases = new Dictionary<Type, string>()
	{
		{ typeof(byte), "byte" },
		{ typeof(sbyte), "sbyte" },
		{ typeof(short), "short" },
		{ typeof(ushort), "ushort" },
		{ typeof(int), "int" },
		{ typeof(uint), "uint" },
		{ typeof(long), "long" },
		{ typeof(ulong), "ulong" },
		{ typeof(float), "float" },
		{ typeof(double), "double" },
		{ typeof(decimal), "decimal" },
		{ typeof(object), "object" },
		{ typeof(bool), "bool" },
		{ typeof(char), "char" },
		{ typeof(string), "string" },
		{ typeof(void), "void" },
		{ typeof(DateTime), "DateTime" }
	};

  private void GenerateSimpleProperties(IEnumerable<PropertyInfo> properties)
  {
    foreach (var property in properties)
    {
      var propertyType = GetTypeName(property.PropertyType);
      var propertyName= property.Name;
#>

    protected <#=propertyType#> _<#=propertyName#>;
    public <#=propertyType#> <#=propertyName#>
    {
        get { return _<#=propertyName#>; }
        set { Set(() => <#=propertyName#>, ref _<#=propertyName#>, value); }
    }

<#+ 
    }
  }

  private void GenerateComplexProperties(IEnumerable<PropertyInfo> properties)
  {
    foreach (var property in properties)
    {
      var propertyType = property.PropertyType.Name;
      var propertyName= property.Name;
#>

    protected <#=propertyType#>Viewmodel _<#=propertyName#>;
    public <#=propertyType#>Viewmodel <#=propertyName#>
    {
        get { return _<#=propertyName#>; }
        set { Set(() => <#=propertyName#>, ref _<#=propertyName#>, value); }
    }

<#+   
    }
  }

  private void GenerateCollectionProperties(IEnumerable<PropertyInfo> properties)
  {
    foreach (var property in properties)
    {
      var itemType = property.PropertyType.GenericTypeArguments[0].Name;
      var propertyName= property.Name;
#>
	public ObservableCollection<<#=itemType#>Viewmodel> <#=propertyName#> { get; set; }
<#+  
    }
  }

#>